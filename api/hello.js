const fetch = require('node-fetch');

module.exports = async (req, res) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è CORS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üì® Received request:', {
    method: req.method,
    path: req.url,
    headers: req.headers,
    body: req.body
  });

  // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ endpoint
  if (req.method === 'GET') {
    return res.status(200).json({ 
      success: true,
      message: '‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      webhook_configured: !!process.env.DISCORD_WEBHOOK_URL,
      timestamp: new Date().toISOString(),
      note: '–î–ª—è –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å'
    });
  }

  // –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º
  if (req.method === 'POST') {
    try {
      const formData = req.body;
      
      if (!process.env.DISCORD_WEBHOOK_URL) {
        return res.status(500).json({ 
          success: false, 
          error: 'Discord webhook not configured' 
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
      const discordResponse = await fetch(process.env.DISCORD_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: "üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –Ø–Ω–¥–µ–∫—Å –§–æ—Ä–º—ã!**",
          embeds: [
            {
              title: "üìù –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏",
              color: 5814783,
              fields: [
                {
                  name: "üë§ –ò–º—è",
                  value: formData.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                  inline: true
                },
                {
                  name: "üìß Email",
                  value: formData.email || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                  inline: true
                },
                {
                  name: "üìû –¢–µ–ª–µ—Ñ–æ–Ω",
                  value: formData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                  inline: true
                },
                {
                  name: "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ",
                  value: formData.message || formData.comment || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }
              ],
              timestamp: new Date().toISOString()
            }
          ]
        }),
      });

      if (discordResponse.ok) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord');
        return res.status(200).json({ 
          success: true, 
          message: '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord' 
        });
      } else {
        const errorText = await discordResponse.text();
        console.error('‚ùå Discord error:', errorText);
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord');
      }

    } catch (error) {
      console.error('‚ùå Error:', error);
      return res.status(500).json({ 
        success: false, 
        error: error.message 
      });
    }
  }

  return res.status(405).json({ error: 'Method not allowed' });
};
